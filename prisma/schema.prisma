generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum SubscriptionType {
  FREE
  PREMIUM
  GOLD
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  passwordDigest  String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  subscriptionId  String
  subscription    Subscription    @relation(fields: [subscriptionId], references: [id])
  profiles        Profile[]
  services        Service[]
  creneaux        Creneau[]
  appointments    Appointment[]   @relation("UserAppointments")
}

model Profile {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  name      String
  bio       String?
  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Service {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  title       String
  description String?
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation("UserAppointments", fields: [userId], references: [id])
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  creneauId       String
  creneau         Creneau       @relation(fields: [creneauId], references: [id])
  appointmentTime DateTime
  status          Status
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Review {
  id            String     @id @default(uuid())
  profileId     String
  profile       Profile    @relation(fields: [profileId], references: [id])
  rating        Int
  comment       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Creneau {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      Status
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointments Appointment[]
}

model Subscription {
  id          String            @id @default(uuid())
  type        SubscriptionType
  users       User[]
}
